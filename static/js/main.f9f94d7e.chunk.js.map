{"version":3,"sources":["serviceWorker.js","screens/main/countdown.js","screens/main/useNotification.js","screens/main/store.js","screens/main/todo.js","screens/main/index.js","index.js"],"names":["Boolean","window","location","hostname","match","buttonStyles","border","background","fontSize","padding","margin","width","phases","pomodoro","seconds","title","short-break","long-break","CountDownTimer","_useNotification","useEffect","Notification","requestPermission","text","concat","alert","Object","slicedToArray","_useReducer","useReducer","state","newState","objectSpread","running","_useReducer2","_useReducer2$","setState","timerRef","useRef","format","m","Math","floor","s","clearInterval","current","_format","_format2","document","_format3","_format4","remainingTime","react_default","a","createElement","Fragment","keys","map","phase","key","onClick","handleSetClick","style","display","currentTime","setInterval","disabled","defaultItems","estimated","completed","expanded","children","ItemContext","React","createContext","Store","_ref","_useState","useState","_useState2","items","setItems","Provider","value","TodoTree","_useContext","useContext","_useContext2","getNodeKey","treeIndex","index_esm","treeData","onChange","generateNodeProps","_ref2","node","path","event","target","changeNodeAtPath","newNode","type","Main","textAlign","height","ReactDOM","render","main","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f9f94d7e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React, {useReducer, useEffect, useRef} from 'react'\nimport {useNotification} from './useNotification'\n\nconst buttonStyles = {\n  border: '1px solid #ccc',\n  background: '#fff',\n  fontSize: '2em',\n  padding: 15,\n  margin: 5,\n  width: 200,\n}\nconst phases = {\n  pomodoro: {\n    seconds: 25 * 60,\n    title: 'Pomodoro',\n  },\n  'short-break': {\n    seconds: 5 * 60,\n    title: 'Short break',\n  },\n  'long-break': {\n    seconds: 15 * 60,\n    title: 'Long break',\n  },\n}\n\nexport function CountDownTimer() {\n  const [alert] = useNotification()\n  const [{seconds, title, running}, setState] = useReducer(\n    (state, newState) => ({\n      ...state,\n      ...newState,\n    }),\n    {\n      running: false,\n      seconds: 0,\n      title: '',\n    },\n  )\n\n  const timerRef = useRef(null)\n\n  useEffect(() => {\n    setState({\n      seconds: phases.pomodoro.seconds,\n      title: phases.pomodoro.title,\n    })\n\n    return () => clearInterval(timerRef.current)\n  }, [])\n\n  useEffect(() => {\n    const [m, s] = format(seconds)\n    document.title = `${m}:${s} - ${title}`\n  }, [seconds])\n\n  function handleRunClick() {\n    if (running) {\n      clearInterval(timerRef.current)\n    } else {\n      let currentTime = seconds - 1\n      setState({seconds: currentTime})\n\n      timerRef.current = setInterval(() => {\n        if (currentTime === 0) {\n          clearInterval(timerRef.current)\n          alert(title)\n        } else {\n          setState({seconds: --currentTime})\n        }\n      }, 1000)\n    }\n    setState({running: !running})\n  }\n\n  function handleSetClick(phase) {\n    clearInterval(timerRef.current)\n    setState({\n      seconds: phase.seconds,\n      title: phase.title,\n      running: false,\n    })\n  }\n\n  function format(seconds) {\n    const m = Math.floor((seconds % 3600) / 60)\n    const s = Math.floor((seconds % 3600) % 60)\n    return [`${m < 10 ? '0' : ''}${m}`, `${s < 10 ? '0' : ''}${s}`]\n  }\n\n  const [m, s] = format(seconds)\n  const remainingTime = `${m}m:${s}s`\n\n  return (\n    <>\n      {Object.keys(phases).map(phase => (\n        <button\n          key={phase}\n          onClick={() => handleSetClick(phases[phase])}\n          style={buttonStyles}\n        >\n          {phases[phase].title}\n        </button>\n      ))}\n      <label\n        style={{\n          fontSize: '5em',\n          display: 'block',\n        }}\n      >\n        {remainingTime}\n      </label>\n      <button\n        onClick={handleRunClick}\n        style={buttonStyles}\n        disabled={seconds === 0}\n      >\n        {running ? 'Stop' : 'Start'}\n      </button>\n    </>\n  )\n}\n\nexport default CountDownTimer\n","import {useEffect} from 'react'\n\nexport function useNotification() {\n  useEffect(() => {\n    Notification.requestPermission()\n  }, [])\n\n  function alert(text) {\n    new Notification(`${text} is over!`, {})\n  }\n\n  return [alert]\n}\n","import React, {useState} from 'react'\n\nconst defaultItems = [\n  {\n    title: 'todo 1',\n    estimated: 3,\n    completed: 0,\n  },\n  {\n    title: 'todo 2',\n    estimated: 2,\n    completed: 1,\n    expanded: true,\n    children: [\n      {\n        title: 'todo 2.1',\n        estimated: 4,\n        completed: 0,\n      },\n    ],\n  },\n]\n\nexport const ItemContext = React.createContext()\n\nexport default function Store({children}) {\n  const [items, setItems] = useState(defaultItems)\n  return (\n    <ItemContext.Provider value={[items, setItems]}>\n      {children}\n    </ItemContext.Provider>\n  )\n}\n","import React, {useContext} from 'react'\nimport 'react-sortable-tree/style.css'\nimport SortableTree, {changeNodeAtPath} from 'react-sortable-tree'\nimport {ItemContext} from './store'\n\nexport function TodoTree() {\n  const [items, setItems] = useContext(ItemContext)\n\n  const getNodeKey = ({treeIndex}) => treeIndex\n\n  return (\n    <SortableTree\n      treeData={items}\n      onChange={items => setItems(items)}\n      generateNodeProps={({node, path}) => ({\n        title: (\n          <>\n            <input\n              style={{fontSize: '1.1rem'}}\n              value={node.title}\n              onChange={event => {\n                const title = event.target.value\n                setItems(items =>\n                  changeNodeAtPath({\n                    treeData: items,\n                    path,\n                    getNodeKey,\n                    newNode: {...node, title},\n                  }),\n                )\n              }}\n            />\n            <input\n              style={{fontSize: '1.1rem'}}\n              value={node.estimated}\n              type=\"number\"\n              onChange={event => {\n                const estimated = event.target.value\n                setItems(items =>\n                  changeNodeAtPath({\n                    treeData: items,\n                    path,\n                    getNodeKey,\n                    newNode: {...node, estimated},\n                  }),\n                )\n              }}\n            />\n            <label style={{fontSize: '1.1rem'}}>{node.completed}</label>\n          </>\n        ),\n      })}\n    />\n  )\n}\n","import React, {useContext} from 'react'\nimport {CountDownTimer} from './countdown'\nimport {TodoTree} from './todo'\nimport Store from './store'\n\nfunction Main() {\n  return (\n    <Store>\n      <div style={{textAlign: 'center'}}>\n        <CountDownTimer />\n        <div style={{height: 400}}>\n          <TodoTree />\n        </div>\n      </div>\n    </Store>\n  )\n}\n\nexport default Main\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\nimport Main from './screens/main'\n\nfunction App() {\n  return <Main />\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}