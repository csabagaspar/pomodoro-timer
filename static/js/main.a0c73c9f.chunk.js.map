{"version":3,"sources":["serviceWorker.js","screens/main/index.js","index.js"],"names":["Boolean","window","location","hostname","match","buttonStyles","border","background","fontSize","padding","margin","width","CountDownTimer","_useReducer","useReducer","state","newState","Object","objectSpread","running","seconds","_useReducer2","slicedToArray","_useReducer2$","setState","timerRef","useRef","handleSetClick","clearInterval","current","format","m","Math","floor","s","concat","useEffect","Notification","requestPermission","_format","_format2","document","title","_format3","_format4","remainingTime","react_default","a","createElement","style","textAlign","onClick","display","currentTime","setInterval","ReactDOM","render","main","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oIAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,6EChBAC,EAAe,CACnBC,OAAQ,iBACRC,WAAY,OACZC,SAAU,MACVC,QAAS,GACTC,OAAQ,EACRC,MAAO,KA6FMC,MA1Ff,WAA0B,IAAAC,EACeC,qBACrC,SAACC,EAAOC,GAAR,OAAAC,OAAAC,EAAA,EAAAD,CAAA,GACKF,EACAC,IAEL,CACEG,SAAS,EACTC,QAAS,OARWC,EAAAJ,OAAAK,EAAA,EAAAL,CAAAJ,EAAA,GAAAU,EAAAF,EAAA,GAChBD,EADgBG,EAChBH,QAASD,EADOI,EACPJ,QAAUK,EADHH,EAAA,GAYlBI,EAAWC,iBAAO,MAsCxB,SAASC,EAAeP,GACtBQ,cAAcH,EAASI,SACvBL,EAAS,CAACJ,UAASD,SAAS,IAG9B,SAASW,EAAOV,GACd,IAAMW,EAAIC,KAAKC,MAAMb,EAAU,KAAO,IAChCc,EAAIF,KAAKC,MAAMb,EAAU,KAAO,IACtC,MAAO,IAAAe,OAAIJ,EAAI,GAAK,IAAK,IAAlBI,OAAuBJ,GAAvB,GAAAI,OAA8BD,EAAI,GAAK,IAAK,IAA5CC,OAAiDD,IA5C1DE,oBAAU,WAER,OADAC,aAAaC,oBACN,kBAAMV,cAAcH,EAASI,WACnC,IAEHO,oBAAU,WAAM,IAAAG,EAEAT,EAAOV,GAFPoB,EAAAvB,OAAAK,EAAA,EAAAL,CAAAsB,EAAA,GAEPR,EAFOS,EAAA,GAELN,EAFKM,EAAA,GAGdC,SAASC,MAAT,GAAAP,OAAoBJ,EAApB,KAAAI,OAAyBD,EAAzB,sBAEC,CAACd,IAxBoB,IAAAuB,EA6DVb,EAAOV,GA7DGwB,EAAA3B,OAAAK,EAAA,EAAAL,CAAA0B,EAAA,GA6DjBZ,EA7DiBa,EAAA,GA6DfV,EA7DeU,EAAA,GA8DlBC,EAAa,GAAAV,OAAMJ,EAAN,MAAAI,OAAYD,EAAZ,KAEnB,OACEY,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,UAAW,WACtBJ,EAAAC,EAAAC,cAAA,UAAQG,QAAS,kBAAMxB,EAAe,OAAQsB,MAAO5C,GAArD,YAGAyC,EAAAC,EAAAC,cAAA,UAAQG,QAAS,kBAAMxB,EAAe,KAAKsB,MAAO5C,GAAlD,eAGAyC,EAAAC,EAAAC,cAAA,UAAQG,QAAS,kBAAMxB,EAAe,MAAQsB,MAAO5C,GAArD,cAGAyC,EAAAC,EAAAC,cAAA,SACEC,MAAO,CACLzC,SAAU,MACV4C,QAAS,UAGVP,GAEHC,EAAAC,EAAAC,cAAA,UAAQG,QAzDZ,WACE,GAAIhC,EACFS,cAAcH,EAASI,aAClB,CACL,IAAIwB,EAAcjC,EAAU,EAC5BI,EAAS,CAACJ,QAASiC,IAEnB5B,EAASI,QAAUyB,YAAY,WACT,IAAhBD,GACFzB,cAAcH,EAASI,SAW7B,IAAIQ,aAAa,oBAAqB,KARhCb,EAAS,CAACJ,UAAWiC,KAEtB,KAEL7B,EAAS,CAACL,SAAUA,KAyCe8B,MAAO5C,GACrCc,EAAU,OAAS,WCtF5BoC,IAASC,OAAOV,EAAAC,EAAAC,cAJhB,WACE,OAAOF,EAAAC,EAAAC,cAACS,EAAD,OAGO,MAAShB,SAASiB,eAAe,SFwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a0c73c9f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React, {useReducer, useEffect, useRef} from 'react'\n\nconst buttonStyles = {\n  border: '1px solid #ccc',\n  background: '#fff',\n  fontSize: '2em',\n  padding: 15,\n  margin: 5,\n  width: 200,\n}\n\nfunction CountDownTimer() {\n  const [{seconds, running}, setState] = useReducer(\n    (state, newState) => ({\n      ...state,\n      ...newState,\n    }),\n    {\n      running: false,\n      seconds: 25*60,\n    },\n  )\n\n  const timerRef = useRef(null)\n\n  useEffect(() => {\n    Notification.requestPermission()\n    return () => clearInterval(timerRef.current)\n  }, [])\n\n  useEffect(() => {\n\n    const [m,s] = format(seconds)\n    document.title = `${m}:${s} - Pomodoro Timer`\n\n  }, [seconds])\n\n  function handleRunClick() {\n    if (running) {\n      clearInterval(timerRef.current)\n    } else {\n      let currentTime = seconds - 1\n      setState({seconds: currentTime})\n\n      timerRef.current = setInterval(() => {\n        if (currentTime === 0) {\n          clearInterval(timerRef.current)\n          alert()\n        } else {\n          setState({seconds: --currentTime})\n        }\n      }, 1000)\n    }\n    setState({running: !running})\n  }\n\n  function alert(){\n    new Notification(\"The time is over!\", {\n    })\n  }\n\n  function handleSetClick(seconds) {\n    clearInterval(timerRef.current)\n    setState({seconds, running: false})\n  }\n\n  function format(seconds) {\n    const m = Math.floor(seconds % 3600 / 60)\n    const s = Math.floor(seconds % 3600 % 60)\n    return [`${m < 10 ? '0': ''}${m}`,`${s < 10 ? '0': ''}${s}`]\n  }\n\n  const [m,s] = format(seconds)\n  const remainingTime = `${m}m:${s}s`\n\n  return (\n    <div style={{textAlign: 'center'}}>\n      <button onClick={() => handleSetClick(25*60)} style={buttonStyles}>\n        Pomodoro\n      </button>\n      <button onClick={() => handleSetClick(10)} style={buttonStyles}>\n        Short break\n      </button>\n      <button onClick={() => handleSetClick(15*60)} style={buttonStyles}>\n        Long break\n      </button>\n      <label\n        style={{\n          fontSize: '5em',\n          display: 'block',\n        }}\n      >\n        {remainingTime}\n      </label>\n      <button onClick={handleRunClick} style={buttonStyles}>\n        {running ? 'Stop' : 'Start'}\n      </button>\n    </div>\n  )\n}\n\nexport default CountDownTimer\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\nimport Main from './screens/main'\n\nfunction App() {\n  return <Main />\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}