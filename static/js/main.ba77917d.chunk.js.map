{"version":3,"sources":["serviceWorker.js","screens/main/index.js","index.js"],"names":["Boolean","window","location","hostname","match","buttonStyles","border","background","fontSize","padding","margin","width","phases","pomodoro","seconds","title","short-break","long-break","CountDownTimer","_useReducer","useReducer","state","newState","Object","objectSpread","running","treeData","estimated","expanded","children","_useReducer2","slicedToArray","_useReducer2$","setState","timerRef","useRef","format","m","Math","floor","s","concat","useEffect","Notification","requestPermission","clearInterval","current","_format","_format2","document","_format3","_format4","remainingTime","getNodeKey","_ref","treeIndex","react_default","a","createElement","style","textAlign","keys","map","phase","key","onClick","handleSetClick","display","currentTime","setInterval","disabled","height","index_esm","onChange","generateNodeProps","_ref2","node","path","Fragment","value","event","target","changeNodeAtPath","newNode","type","completed","ReactDOM","render","main","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba77917d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React, {useReducer, useEffect, useRef} from 'react'\nimport 'react-sortable-tree/style.css'\nimport SortableTree, {changeNodeAtPath} from 'react-sortable-tree'\n\nconst buttonStyles = {\n  border: '1px solid #ccc',\n  background: '#fff',\n  fontSize: '2em',\n  padding: 15,\n  margin: 5,\n  width: 200,\n}\nconst phases = {\n  pomodoro: {\n    seconds: 25 * 60,\n    title: 'Pomodoro',\n  },\n  'short-break': {\n    seconds: 5 * 60,\n    title: 'Short break',\n  },\n  'long-break': {\n    seconds: 15 * 60,\n    title: 'Long break',\n  },\n}\n\nfunction CountDownTimer() {\n  const [{seconds, title, running, treeData}, setState] = useReducer(\n    (state, newState) => ({\n      ...state,\n      ...newState,\n    }),\n    {\n      running: false,\n      seconds: 0,\n      title: '',\n      treeData: [\n        {title: 'todo 1', estimated: 3},\n        {\n          title: 'todo 2',\n          estimated: 2,\n          expanded: true,\n          children: [{title: 'todo 2.1', estimated: 4}],\n        },\n      ],\n    },\n  )\n\n  const timerRef = useRef(null)\n\n  useEffect(() => {\n    setState({\n      seconds: phases.pomodoro.seconds,\n      title: phases.pomodoro.title,\n    })\n    Notification.requestPermission()\n\n    return () => clearInterval(timerRef.current)\n  }, [])\n\n  useEffect(() => {\n    const [m, s] = format(seconds)\n    document.title = `${m}:${s} - ${title}`\n  }, [seconds])\n\n  function handleRunClick() {\n    if (running) {\n      clearInterval(timerRef.current)\n    } else {\n      let currentTime = seconds - 1\n      setState({seconds: currentTime})\n\n      timerRef.current = setInterval(() => {\n        if (currentTime === 0) {\n          clearInterval(timerRef.current)\n          alert()\n        } else {\n          setState({seconds: --currentTime})\n        }\n      }, 1000)\n    }\n    setState({running: !running})\n  }\n\n  function alert() {\n    new Notification(`${title} is over!`, {})\n  }\n\n  function handleSetClick(phase) {\n    clearInterval(timerRef.current)\n    setState({\n      seconds: phase.seconds,\n      title: phase.title,\n      running: false,\n    })\n  }\n\n  function format(seconds) {\n    const m = Math.floor((seconds % 3600) / 60)\n    const s = Math.floor((seconds % 3600) % 60)\n    return [`${m < 10 ? '0' : ''}${m}`, `${s < 10 ? '0' : ''}${s}`]\n  }\n\n  const [m, s] = format(seconds)\n  const remainingTime = `${m}m:${s}s`\n\n  const getNodeKey = ({treeIndex}) => treeIndex\n  return (\n    <div style={{textAlign: 'center'}}>\n      {Object.keys(phases).map(phase => (\n        <button\n          key={phase}\n          onClick={() => handleSetClick(phases[phase])}\n          style={buttonStyles}\n        >\n          {phases[phase].title}\n        </button>\n      ))}\n      <label\n        style={{\n          fontSize: '5em',\n          display: 'block',\n        }}\n      >\n        {remainingTime}\n      </label>\n      <button\n        onClick={handleRunClick}\n        style={buttonStyles}\n        disabled={seconds === 0}\n      >\n        {running ? 'Stop' : 'Start'}\n      </button>\n      <div style={{height: 400}}>\n        <SortableTree\n          treeData={treeData}\n          onChange={treeData => setState({treeData})}\n          generateNodeProps={({node, path}) => ({\n            title: (\n              <>\n                <input\n                  style={{fontSize: '1.1rem'}}\n                  value={node.title}\n                  onChange={event => {\n                    const title = event.target.value\n                    setState({\n                      treeData: changeNodeAtPath({\n                        treeData: treeData,\n                        path,\n                        getNodeKey,\n                        newNode: {...node, title},\n                      }),\n                    })\n                  }}\n                />\n                <input\n                  style={{fontSize: '1.1rem'}}\n                  value={node.estimated}\n                  type=\"number\"\n                  onChange={event => {\n                    const estimated = event.target.value\n                    setState({\n                      treeData: changeNodeAtPath({\n                        treeData: treeData,\n                        path,\n                        getNodeKey,\n                        newNode: {...node, estimated},\n                      }),\n                    })\n                  }}\n                />\n                <input\n                  style={{fontSize: '1.1rem'}}\n                  value={node.completed}\n                  type=\"number\"\n                  onChange={event => {\n                    const completed = event.target.value\n                    setState({\n                      treeData: changeNodeAtPath({\n                        treeData: treeData,\n                        path,\n                        getNodeKey,\n                        newNode: {...node, completed},\n                      }),\n                    })\n                  }}\n                />\n              </>\n            ),\n          })}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default CountDownTimer\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\nimport Main from './screens/main'\n\nfunction App() {\n  return <Main />\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}